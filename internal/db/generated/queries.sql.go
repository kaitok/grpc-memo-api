// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package generated

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createMemo = `-- name: CreateMemo :exec
INSERT INTO memos (id, user_id, content, created_at) VALUES ($1, $2, $3, $4)
`

type CreateMemoParams struct {
	ID        uuid.UUID
	UserID    string
	Content   string
	CreatedAt time.Time
}

func (q *Queries) CreateMemo(ctx context.Context, arg CreateMemoParams) error {
	_, err := q.db.ExecContext(ctx, createMemo,
		arg.ID,
		arg.UserID,
		arg.Content,
		arg.CreatedAt,
	)
	return err
}

const getMemo = `-- name: GetMemo :one
SELECT id, user_id, content, created_at FROM memos WHERE user_id = $1 AND id = $2
`

type GetMemoParams struct {
	UserID string
	ID     uuid.UUID
}

func (q *Queries) GetMemo(ctx context.Context, arg GetMemoParams) (Memo, error) {
	row := q.db.QueryRowContext(ctx, getMemo, arg.UserID, arg.ID)
	var i Memo
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}

const listMemos = `-- name: ListMemos :many
SELECT id, user_id, content, created_at FROM memos WHERE user_id = $1
`

func (q *Queries) ListMemos(ctx context.Context, userID string) ([]Memo, error) {
	rows, err := q.db.QueryContext(ctx, listMemos, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Memo
	for rows.Next() {
		var i Memo
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Content,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMemo = `-- name: UpdateMemo :exec
UPDATE memos SET content = $2 WHERE id = $1
`

type UpdateMemoParams struct {
	ID      uuid.UUID
	Content string
}

func (q *Queries) UpdateMemo(ctx context.Context, arg UpdateMemoParams) error {
	_, err := q.db.ExecContext(ctx, updateMemo, arg.ID, arg.Content)
	return err
}
